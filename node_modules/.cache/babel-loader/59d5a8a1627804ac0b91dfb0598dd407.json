{"ast":null,"code":"var _jsxFileName = \"/home/luiz/estudos/05-primeiro-projeto-react/src/pages/Dashboard/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\nimport logoImg from \"../../assets/logo.svg\";\nimport { Title, Form, Repositories, Error } from './styles';\n\nconst Dashboard = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState(() => {\n    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\n\n    if (storagedRepositories) {\n      return JSON.parse(storagedRepositories); // Aqui faz com que fique salvo com o f5\n    } else {\n      return [];\n    }\n  }); // UseEffet -> sempre que haver mudança na variavel repositories, salve sempre no localStorage\n  // Para não haver conflito com os localhost:3000 porque são compartilhados, o setItem colocamos @Nome:o que quer\n\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories));\n  }, [repositories]); // FUnção para adicionar repositorio\n\n  async function handleAddRepository(event) {\n    event.preventDefault(); // Previne o comportamento padrão\n    //Verificar se o input está vazio\n\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do repositorio');\n      return;\n    }\n\n    try {\n      const response = await api.get(`repos/${newRepo}`); //console.log(response.data);\n\n      const repository = response.data;\n      setRepositories([...repositories, repository]);\n      setNewRepo(''); // LImpando o input\n\n      setInputError(''); //Limpando o error\n    } catch (err) {\n      setInputError('Error na busca por esse repositório');\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"img\", {\n    src: logoImg,\n    alt: \"GitHub Explorer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, \"Explore reposit\\xF3rios no Github\"), /*#__PURE__*/React.createElement(Form, {\n    hasError: !!inputError,\n    onSubmit: handleAddRepository,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newRepo,\n    onChange: e => setNewRepo(e.target.value) //\n    ,\n    placeholder: \"Digite o nome do reposit\\xF3rio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Pesquisar\")), inputError && /*#__PURE__*/React.createElement(Error, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 20\n    }\n  }, inputError), /*#__PURE__*/React.createElement(Repositories, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, repositories.map(repository => /*#__PURE__*/React.createElement(Link, {\n    key: repository.full_name,\n    to: `/repositories/${repository.full_name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: repository.owner.avatar_url,\n    alt: repository.owner.login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 6\n    }\n  }, repository.full_name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 6\n    }\n  }, repository.description)), /*#__PURE__*/React.createElement(FiChevronRight, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  })))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/luiz/estudos/05-primeiro-projeto-react/src/pages/Dashboard/index.tsx"],"names":["React","useState","useEffect","FiChevronRight","Link","api","Title","Form","Repositories","Error","Dashboard","newRepo","setNewRepo","inputError","setInputError","repositories","setRepositories","storagedRepositories","localStorage","getItem","JSON","parse","setItem","stringify","handleAddRepository","event","preventDefault","response","get","repository","data","err","logoImg","e","target","value","map","full_name","owner","avatar_url","login","description"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, FormEvent} from 'react';\nimport { FiChevronRight} from 'react-icons/fi'\nimport {Link} from 'react-router-dom';\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository{\n  full_name: string;\n  description:string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\n\n    if(storagedRepositories){\n      return JSON.parse(storagedRepositories); // Aqui faz com que fique salvo com o f5\n    }\n    else{\n      return [];\n    }\n  });\n\n\n\n  // UseEffet -> sempre que haver mudança na variavel repositories, salve sempre no localStorage\n  // Para não haver conflito com os localhost:3000 porque são compartilhados, o setItem colocamos @Nome:o que quer\n  useEffect(() => {\n    localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  // FUnção para adicionar repositorio\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>\n    ): Promise<void>{\n      event.preventDefault(); // Previne o comportamento padrão\n\n\n    //Verificar se o input está vazio\n    if(!newRepo){\n      setInputError('Digite o autor/nome do repositorio');\n      return;\n    }\n\n    try{\n    const response = await api.get<Repository>(`repos/${newRepo}`);\n\n    //console.log(response.data);\n    const repository = response.data;\n\n\n    setRepositories([...repositories, repository]);\n    setNewRepo(''); // LImpando o input\n    setInputError(''); //Limpando o error\n\n    }catch (err){\n      setInputError('Error na busca por esse repositório');\n    }\n\n  }\n\n    return (\n    <>\n    <img src={logoImg} alt=\"GitHub Explorer\" />\n    <Title>Explore repositórios no Github</Title>\n\n\n    <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n\n      <input value={newRepo}\n      onChange={(e) => setNewRepo(e.target.value)} //\n      placeholder=\"Digite o nome do repositório\"/>\n      <button type=\"submit\">Pesquisar</button>\n    </Form>\n\n    {inputError && <Error>{inputError}</Error>}\n\n    <Repositories>\n     {repositories.map(repository => (\n        <Link key={repository.full_name} to={`/repositories/${repository.full_name}`}>\n        <img src={repository.owner.avatar_url}\n        alt={repository.owner.login}/>\n        <div>\n     <strong>{repository.full_name}</strong>\n     <p>{repository.description}</p>\n\n        </div>\n        <FiChevronRight size={20} />\n        </Link>\n     ))}\n\n\n\n\n    </Repositories>\n  </>\n  )\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}